<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>野蛮生长 to 2018</title>
  
  <subtitle>记录生活点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dwjie824.github.io/"/>
  <updated>2018-06-06T03:18:28.552Z</updated>
  <id>https://dwjie824.github.io/</id>
  
  <author>
    <name>dongwj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小问题引起的Work Bug</title>
    <link href="https://dwjie824.github.io/2018/06/06/Work-Bug/"/>
    <id>https://dwjie824.github.io/2018/06/06/Work-Bug/</id>
    <published>2018-06-06T02:44:08.000Z</published>
    <updated>2018-06-06T03:18:28.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库字段类型不同导致的问题"><a href="#数据库字段类型不同导致的问题" class="headerlink" title="数据库字段类型不同导致的问题"></a>数据库字段类型不同导致的问题</h3><p> 原始数据库表term_info的termtype字段类型为char(10)<br> 新建新表term_qplimit其中的termtype字段类型为char(8),<br> 语句如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT A.QPLIMIT,nvl(A.QPSTATUS,&apos;1&apos;)</span><br><span class="line">  INTO :caTQpLimit,caTQpStatus  </span><br><span class="line">FROM term_qplimit A, term_info C</span><br><span class="line">where A.termtype = c.termtype AND C.AGENTID=:g_caAgentId;</span><br></pre></td></tr></table></figure></p><p> 上线表term_qplimit其中的termtype字段类型为varchar2(8),然后就关联不到了，gg<br> 原因是char类型后面补足了空格，但都用char类型竟然可以，今后还是统一用varchar2类型吧，或者做去空处理<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> SELECT A.QPLIMIT,nvl(A.QPSTATUS,&apos;1&apos;)</span><br><span class="line">  INTO :caTQpLimit,caTQpStatus  </span><br><span class="line">FROM term_qplimit A, term_info C</span><br><span class="line">where trim(A.termtype) = trim(c.termtype) AND C.AGENTID=:g_caAgentId;</span><br></pre></td></tr></table></figure></p> <a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库字段类型不同导致的问题&quot;&gt;&lt;a href=&quot;#数据库字段类型不同导致的问题&quot; class=&quot;headerlink&quot; title=&quot;数据库字段类型不同导致的问题&quot;&gt;&lt;/a&gt;数据库字段类型不同导致的问题&lt;/h3&gt;&lt;p&gt; 原始数据库表term_info的termtype字段类型为char(10)&lt;br&gt; 新建新表term_qplimit其中的termtype字段类型为char(8),&lt;br&gt; 语句如下：&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SELECT A.QPLIMIT,nvl(A.QPSTATUS,&amp;apos;1&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  INTO :caTQpLimit,caTQpStatus  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FROM term_qplimit A, term_info C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;where A.termtype = c.termtype AND C.AGENTID=:g_caAgentId;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 上线表term_qplimit其中的termtype字段类型为varchar2(8),然后就关联不到了，gg&lt;br&gt; 原因是char类型后面补足了空格，但都用char类型竟然可以，今后还是统一用varchar2类型吧，或者做去空处理&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; SELECT A.QPLIMIT,nvl(A.QPSTATUS,&amp;apos;1&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  INTO :caTQpLimit,caTQpStatus  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FROM term_qplimit A, term_info C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;where trim(A.termtype) = trim(c.termtype) AND C.AGENTID=:g_caAgentId;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="https://dwjie824.github.io/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="https://dwjie824.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Python编程基础篇</title>
    <link href="https://dwjie824.github.io/2018/05/28/Hello-Hexo/"/>
    <id>https://dwjie824.github.io/2018/05/28/Hello-Hexo/</id>
    <published>2018-05-28T04:32:28.000Z</published>
    <updated>2018-06-05T11:19:53.557Z</updated>
    
    <content type="html"><![CDATA[<p>在python中，用方括号 ([]) 来表示列表，并用逗号来分隔其中的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">'trek'</span>, <span class="string">'cannondale'</span>, <span class="string">'redline'</span>, <span class="string">'specialized'</span>]</span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure></p><p>如果你让Python将列表打印出来， Python将打印列表内的内部表示，包括方括号：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'trek'</span>, <span class="string">'cannondale'</span>, <span class="string">'redline'</span>, <span class="string">'specialized'</span>]</span><br></pre></td></tr></table></figure></p><p>正确方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><p>Python只返回该元素， 而不包括方括号和引号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trek</span><br></pre></td></tr></table></figure></p><p>Python为访问最后一个列表元素提供了一个特殊语法。通过将索引指定为-1，可让Python返回最后一个列表元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(bicycles[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></p><p>这种约定也适用于其他负数索引，例如：索引-2返回倒数第二个列表元素，索引-3返回倒数第三个列表元素，以此类推。</p><a id="more"></a><p>在列表末尾添加元素，使用.append()<br>在列表中插入元素，使用insert() ， 使用方法insert() 可在列表的任何位置添加新元素。<br>为此，你需要指定新元素的索引和值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles=[<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">'ducati'</span>)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure></p><p>使用del语句删除元素<br>如果知道要删除的元素在列表中的位置，可使用del语句。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>]</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure></p><p>方法pop() 可删除列表末尾的元素，并让你能够接着使用它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">popped_motorcycle = motorcycles.pop()</span><br></pre></td></tr></table></figure></p><p>实际上可使用pop() 来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">'honda'</span>, <span class="string">'yamaha'</span>, <span class="string">'suzuki'</span>]</span><br><span class="line">fisrt_owned=motorcycles.pop(<span class="number">0</span>)</span><br><span class="line">print(<span class="string">'The first motorcycle I owned was a '</span> + first_owned.title() + <span class="string">'.'</span>)</span><br></pre></td></tr></table></figure></p><p>根据值删除元素，可使用方法remove()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">motorcycles.remove(<span class="string">'ducati'</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>注意： 方法remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断</p></blockquote><p>使用方法sort()对列表进行永久性排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort()</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure></p><p>向sort()方法传递参数reverse=True。就可以按与字母顺序相反的顺序排列列表元素。同样，对列表元素排列顺序的修改时永久性的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars.sort(reverse=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>使用函数sorted() 能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(sorted(cars))</span><br></pre></td></tr></table></figure></p><p>调用函数sorted() 后，列表元素的排列顺序并没有变。如果要按与字母顺序相反的顺序显示列表，也可向函数sorted()传递参数reverse=True。</p><p>要反转列表元素的排列顺序，可使用reverse()。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars.reverse()</span><br></pre></td></tr></table></figure></p><p>方法reverse() 永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。</p><p>使用for循环来打印魔术师名单中的所有名字：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">print(magician)</span><br></pre></td></tr></table></figure></p><p>在for循环中，想包含多少行代码都可以，每个缩进的代码行都是循环的一部分，而没有缩进的代码都只执行一次，不会重复执行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">magicians = [<span class="string">'alice'</span>, <span class="string">'david'</span>, <span class="string">'carolina'</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians:</span><br><span class="line">print(magician.title() + <span class="string">", that was a great trick!"</span>)</span><br><span class="line">print(<span class="string">"I can't wait to see your trick,"</span> + magician.title() + <span class="string">".\n"</span>)</span><br><span class="line">print(<span class="string">"Thank you, everyone. That was a great magic show!"</span>)</span><br></pre></td></tr></table></figure></p><p>执行结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Alice, that was a great trick!</span><br><span class="line">I can&apos;t wait to see your next trick, Alice.</span><br><span class="line"></span><br><span class="line">David, that was a great trick!</span><br><span class="line">I can&apos;t wait to see your next trick, Alice.</span><br><span class="line"></span><br><span class="line">Carolina, that was a great trick!</span><br><span class="line">I can&apos;t wait to see your next trick, Alice.</span><br><span class="line"></span><br><span class="line">Thank you,everyone. That was a great magic show!</span><br></pre></td></tr></table></figure></p><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>如果你不小心缩进了无需缩进的代码行，Python将指出这一点：<br>hello_world.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"Hello Python world!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></p><p>Python 将指出这种错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> File &quot;hello_world.py&quot;, line 2</span><br><span class="line"> print(message)</span><br><span class="line"> ^</span><br><span class="line">IndentationError: unexpected indent</span><br></pre></td></tr></table></figure></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>要打印数字1~5，需要使用range(1,6)<br>创建数字列表，可使用函数list() 将range() 的结果直接转换为列表。如果将range()作为list的参数，输出将为一个数字列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers=list(range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5]</span><br></pre></td></tr></table></figure></p><p>使用函数range()时，还可指定步长。例如：下面的代码打印1~10内的偶数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">even_numbers = list(range(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br><span class="line">print(even_numbers)</span><br></pre></td></tr></table></figure></p><p>在这个示列中，函数range()从2开始数，然后不断加2，直到达到或超过终值(11),故输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2,4,6,8,10]</span><br></pre></td></tr></table></figure></p><p>使用列表解析创建平方数列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [values**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>处理列表的部分元素–Python称之为切片<br>要创建切片，可指定要是使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在到达你指定的第二个索引前面的元素后停止。<br>要输出列表中的前三个元素，需要指定索引0~3，这将输出分别为0、1和2的这3个元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">players = [&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;]</span><br><span class="line">print(players[0:3])</span><br><span class="line">print(players[:4])</span><br><span class="line">print(players[2:])</span><br></pre></td></tr></table></figure></p><p>如果要输出名单上的最后三名队员，可使用切片players[-3:]<br>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引([:])。区别于关联。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods=my_foods[:]</span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line">print(<span class="string">"My favorite foods are："</span>)</span><br><span class="line">print(my_foods)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nMy friend's favorite foods are:"</span>)</span><br><span class="line">print(friend_foods)</span><br></pre></td></tr></table></figure></p><p>在不使用切片的情况下复制列表的情况：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line"><span class="comment">#这行不通</span></span><br><span class="line">friend_foods=my_foods</span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line">print(<span class="string">"My favorite foods are："</span>)</span><br><span class="line">print(my_foods)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nMy friend's favorite foods are:"</span>)</span><br><span class="line">print(friend_foods)</span><br></pre></td></tr></table></figure></p><p>这里是将my_foods赋给friend_foods，而不是将my_foods的副本存储到friend_foods。实际这两个变量都指向同一个列表。</p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>Python将不能修改的值称为不可变的，而不可变的列表被称为元组。<br>元组看起来犹如列表，但使用圆括号而不是方括号来标识。<br>任何试图修改元组的操作是被禁止的，因此python指出不能给元组的元素赋值。<br>虽然不能修改元组的元素，但可以给存储元组的变量赋值。比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dimensions =(<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">print(<span class="string">"Original dimensions:"</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">print(dimension)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dimensions[0] =400 #Python返回类型错误消息</span></span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>) <span class="comment">#给元组变量赋值是合法的</span></span><br><span class="line">print(<span class="string">"\nModified dimensions:"</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">print(dimension)</span><br></pre></td></tr></table></figure></p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>在Python中，字典是用放在花括号{}中的一系列键-值对表示。如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>:<span class="number">5</span>&#125;</span><br><span class="line">print(alien_0[<span class="string">'color'</span>])</span><br><span class="line">print(alien_0)</span><br><span class="line">alien_0[<span class="string">'x_position'</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">'y_position'</span>] = <span class="number">25</span></span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure></p><p>显示结果为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">green</span><br><span class="line">&#123;<span class="string">'color'</span>:<span class="string">'green'</span>, <span class="string">'points'</span>:<span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>:<span class="string">'green'</span>, <span class="string">'points'</span>:<span class="number">5</span>, <span class="string">'y_position'</span>:<span class="number">25</span>, <span class="string">'x_position'</span>:<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure></p><p>注意：键-值对的排列顺序与添加顺序不同，Python不关心键-值对的添加顺序，而只关心键和值之间的关联关系。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在python中，用方括号 ([]) 来表示列表，并用逗号来分隔其中的元素。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bicycles = [&lt;span class=&quot;string&quot;&gt;&#39;trek&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cannondale&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;redline&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;specialized&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(bicycles)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你让Python将列表打印出来， Python将打印列表内的内部表示，包括方括号：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;trek&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;cannondale&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;redline&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;specialized&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;正确方式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(bicycles[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python只返回该元素， 而不包括方括号和引号&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;trek&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Python为访问最后一个列表元素提供了一个特殊语法。通过将索引指定为-1，可让Python返回最后一个列表元素：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(bicycles[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种约定也适用于其他负数索引，例如：索引-2返回倒数第二个列表元素，索引-3返回倒数第三个列表元素，以此类推。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://dwjie824.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://dwjie824.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://dwjie824.github.io/2018/05/25/hello-world/"/>
    <id>https://dwjie824.github.io/2018/05/25/hello-world/</id>
    <published>2018-05-25T08:42:26.873Z</published>
    <updated>2018-05-25T08:42:26.873Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
