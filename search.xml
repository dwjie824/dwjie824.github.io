<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python 之禅]]></title>
    <url>%2F2018%2F05%2F28%2FHello-Hexo%2F</url>
    <content type="text"><![CDATA[欢迎光临累了， 可以休息一下， 哈哈哈 Beautiful is better than ugly.Simple is better than complex.Complex is better than complicated.Readability counts.There should be one–and preferably only one–obvious way to do it.Now is better than never. 在python中，用方括号 ([]) 来表示列表，并用逗号来分隔其中的元素。12bicycles = ['trek', 'cannondale', 'redline', 'specialized']print(bicycles) 如果你让Python将列表打印出来， Python将打印列表内的内部表示，包括方括号：1['trek', 'cannondale', 'redline', 'specialized'] 正确方式1print(bicycles[0]) Python只返回该元素， 而不包括方括号和引号1trek Python为访问最后一个列表元素提供了一个特殊语法。通过将索引指定为-1，可让Python返回最后一个列表元素：1print(bicycles[-1]) 这种约定也适用于其他负数索引，例如：索引-2返回倒数第二个列表元素，索引-3返回倒数第三个列表元素，以此类推。在列表末尾添加元素，使用.append()在列表中插入元素，使用insert() ， 使用方法insert() 可在列表的任何位置添加新元素。为此，你需要指定新元素的索引和值。123motorcycles=['honda', 'yamaha', 'suzuki']motorcycles.insert(0, 'ducati')print(motorcycles) 使用del语句删除元素如果知道要删除的元素在列表中的位置，可使用del语句。123motorcycles = ['honda', 'yamaha', 'suzuki']del motorcycles[0]print(motorcycles) 方法pop() 可删除列表末尾的元素，并让你能够接着使用它。1popped_motorcycle = motorcycles.pop() 实际上可使用pop() 来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。123motorcycles = ['honda', 'yamaha', 'suzuki']fisrt_owned=motorcycles.pop(0)print('The first motorcycle I owned was a ' + first_owned.title() + '.') 根据值删除元素，可使用方法remove()1motorcycles.remove('ducati') 注意： 方法remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断 使用方法sort()对列表进行永久性排序123cars = ['bmw', 'audi', 'toyota', 'subaru']cars.sort()print(cars) 向sort()方法传递参数reverse=True。就可以按与字母顺序相反的顺序排列列表元素。同样，对列表元素排列顺序的修改时永久性的。1cars.sort(reverse=True) 使用函数sorted() 能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。1print(sorted(cars)) 调用函数sorted() 后，列表元素的排列顺序并没有变。如果要按与字母顺序相反的顺序显示列表，也可向函数sorted()传递参数reverse=True。 要反转列表元素的排列顺序，可使用reverse()。1cars.reverse() 方法reverse() 永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
