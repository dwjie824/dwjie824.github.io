<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小问题引起的Work Bug]]></title>
    <url>%2F2018%2F06%2F06%2FWork-Bug%2F</url>
    <content type="text"><![CDATA[数据库字段类型不同导致的问题 原始数据库表term_info的termtype字段类型为char(10) 新建新表term_qplimit其中的termtype字段类型为char(8), 语句如下： 1234SELECT A.QPLIMIT,nvl(A.QPSTATUS,&apos;1&apos;) INTO :caTQpLimit,caTQpStatus FROM term_qplimit A, term_info Cwhere A.termtype = c.termtype AND C.AGENTID=:g_caAgentId; 上线表term_qplimit其中的termtype字段类型为varchar2(8),然后就关联不到了，gg 原因是char类型后面补足了空格，但都用char类型竟然可以，今后还是统一用varchar2类型吧，或者做去空处理 1234 SELECT A.QPLIMIT,nvl(A.QPSTATUS,&apos;1&apos;) INTO :caTQpLimit,caTQpStatus FROM term_qplimit A, term_info Cwhere trim(A.termtype) = trim(c.termtype) AND C.AGENTID=:g_caAgentId;]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python编程基础篇]]></title>
    <url>%2F2018%2F05%2F28%2FHello-Hexo%2F</url>
    <content type="text"><![CDATA[在python中，用方括号 ([]) 来表示列表，并用逗号来分隔其中的元素。12bicycles = ['trek', 'cannondale', 'redline', 'specialized']print(bicycles) 如果你让Python将列表打印出来， Python将打印列表内的内部表示，包括方括号：1['trek', 'cannondale', 'redline', 'specialized'] 正确方式1print(bicycles[0]) Python只返回该元素， 而不包括方括号和引号1trek Python为访问最后一个列表元素提供了一个特殊语法。通过将索引指定为-1，可让Python返回最后一个列表元素：1print(bicycles[-1]) 这种约定也适用于其他负数索引，例如：索引-2返回倒数第二个列表元素，索引-3返回倒数第三个列表元素，以此类推。 在列表末尾添加元素，使用.append()在列表中插入元素，使用insert() ， 使用方法insert() 可在列表的任何位置添加新元素。为此，你需要指定新元素的索引和值。123motorcycles=['honda', 'yamaha', 'suzuki']motorcycles.insert(0, 'ducati')print(motorcycles) 使用del语句删除元素如果知道要删除的元素在列表中的位置，可使用del语句。123motorcycles = ['honda', 'yamaha', 'suzuki']del motorcycles[0]print(motorcycles) 方法pop() 可删除列表末尾的元素，并让你能够接着使用它。1popped_motorcycle = motorcycles.pop() 实际上可使用pop() 来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。123motorcycles = ['honda', 'yamaha', 'suzuki']fisrt_owned=motorcycles.pop(0)print('The first motorcycle I owned was a ' + first_owned.title() + '.') 根据值删除元素，可使用方法remove()1motorcycles.remove('ducati') 注意： 方法remove() 只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断 使用方法sort()对列表进行永久性排序123cars = ['bmw', 'audi', 'toyota', 'subaru']cars.sort()print(cars) 向sort()方法传递参数reverse=True。就可以按与字母顺序相反的顺序排列列表元素。同样，对列表元素排列顺序的修改时永久性的。1cars.sort(reverse=True) 使用函数sorted() 能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。1print(sorted(cars)) 调用函数sorted() 后，列表元素的排列顺序并没有变。如果要按与字母顺序相反的顺序显示列表，也可向函数sorted()传递参数reverse=True。 要反转列表元素的排列顺序，可使用reverse()。1cars.reverse() 方法reverse() 永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。 使用for循环来打印魔术师名单中的所有名字：123magicians = ['alice', 'david', 'carolina']for magician in magicians: print(magician) 在for循环中，想包含多少行代码都可以，每个缩进的代码行都是循环的一部分，而没有缩进的代码都只执行一次，不会重复执行。12345magicians = ['alice', 'david', 'carolina']for magician in magicians: print(magician.title() + ", that was a great trick!") print("I can't wait to see your trick," + magician.title() + ".\n")print("Thank you, everyone. That was a great magic show!") 执行结果为：12345678910Alice, that was a great trick!I can&apos;t wait to see your next trick, Alice.David, that was a great trick!I can&apos;t wait to see your next trick, Alice.Carolina, that was a great trick!I can&apos;t wait to see your next trick, Alice.Thank you,everyone. That was a great magic show! 缩进如果你不小心缩进了无需缩进的代码行，Python将指出这一点：hello_world.py12message = "Hello Python world!" print(message) Python 将指出这种错误：1234 File &quot;hello_world.py&quot;, line 2 print(message) ^IndentationError: unexpected indent 列表要打印数字1~5，需要使用range(1,6)创建数字列表，可使用函数list() 将range() 的结果直接转换为列表。如果将range()作为list的参数，输出将为一个数字列表。12numbers=list(range(1,6))print(numbers) 结果如下：1[1,2,3,4,5] 使用函数range()时，还可指定步长。例如：下面的代码打印1~10内的偶数：12even_numbers = list(range(2,11,2))print(even_numbers) 在这个示列中，函数range()从2开始数，然后不断加2，直到达到或超过终值(11),故输出为：1[2,4,6,8,10] 使用列表解析创建平方数列表12squares = [values**2 for value in range(1,11)]print(squares) 切片处理列表的部分元素–Python称之为切片要创建切片，可指定要是使用的第一个元素和最后一个元素的索引。与函数range() 一样，Python在到达你指定的第二个索引前面的元素后停止。要输出列表中的前三个元素，需要指定索引0~3，这将输出分别为0、1和2的这3个元素。12345players = [&apos;charles&apos;, &apos;martina&apos;, &apos;michael&apos;, &apos;florence&apos;, &apos;eli&apos;]print(players[0:3])print(players[:4])print(players[2:]) 如果要输出名单上的最后三名队员，可使用切片players[-3:]要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引([:])。区别于关联。123456789my_foods = ['pizza', 'falafel', 'carrot cake']friend_foods=my_foods[:]my_foods.append('cannoli')friend_foods.append('ice cream')print("My favorite foods are：")print(my_foods)print("\nMy friend's favorite foods are:")print(friend_foods) 在不使用切片的情况下复制列表的情况：12345678910my_foods = ['pizza', 'falafel', 'carrot cake']#这行不通friend_foods=my_foodsmy_foods.append('cannoli')friend_foods.append('ice cream')print("My favorite foods are：")print(my_foods)print("\nMy friend's favorite foods are:")print(friend_foods) 这里是将my_foods赋给friend_foods，而不是将my_foods的副本存储到friend_foods。实际这两个变量都指向同一个列表。 元组Python将不能修改的值称为不可变的，而不可变的列表被称为元组。元组看起来犹如列表，但使用圆括号而不是方括号来标识。任何试图修改元组的操作是被禁止的，因此python指出不能给元组的元素赋值。虽然不能修改元组的元素，但可以给存储元组的变量赋值。比如：12345678910dimensions =(200, 50)print("Original dimensions:")for dimension in dimensions: print(dimension) #dimensions[0] =400 #Python返回类型错误消息dimensions = (400, 100) #给元组变量赋值是合法的print("\nModified dimensions:")for dimension in dimensions: print(dimension) 字典在Python中，字典是用放在花括号{}中的一系列键-值对表示。如下所示：123456alien_0 = &#123;'color': 'green', 'points':5&#125;print(alien_0['color'])print(alien_0)alien_0['x_position'] = 0alien_0['y_position'] = 25print(alien_0) 显示结果为：123green&#123;'color':'green', 'points':5&#125;&#123;'color':'green', 'points':5, 'y_position':25, 'x_position':0&#125; 注意：键-值对的排列顺序与添加顺序不同，Python不关心键-值对的添加顺序，而只关心键和值之间的关联关系。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
